en:
  net_status:
    missing_translation: "Missing translation for code: `%{code}`!"
    shellout:
      shell_command_failed: ">>> START STREAM\n%{stream}\n>>> END STREAM"
    dimg:
      dimg_not_built: "Dimg hasn't been built yet!"
      dimg_stage_not_built: "Dimg stage `%{stage_name}` hasn't been built yet!"
      dimg_not_run: "Dimg run failed!"
    dappfile:
      incorrect: "Dappfile with `%{error}`:\n%{message}"
    build:
      ruby2go_image_command_failed: 'ruby2go_image command `%{command}` failed!'
      from_image_required: 'Missing from_image!'
      image_already_untagged: "Image `%{name}` untagged already!"
      image_not_exist: "Image `%{name}` doesn't exist!"
      built_id_not_defined: '`from.built_id` not defined!'
      from_image_not_found: 'Image `%{name}` not found!'
      unsupported_patch_format: "Unsupported patch format:\n\n%{patch}"
      unsupported_docker_image_size_format: "Unsupported docker image size format `%{value}`"
      export_failed: "Artifact export failed (`%{artifact_name}`): check artifact.export in Dappfile!"
    command:
      command_unexpected_dimgs_number: "Command can process only one dimg!\nAmbiguous dimg pattern: `%{dimgs_names}`!"
      mrproper_required_option: "Expected command option `--improper-dev-mode-cache`, `--improper-cache-version-stages` or `--all`!"
      cleanup_repo_required_option: "Expected command option `--improper-nonexistent-git-tag-branch-commit`!"
      stages_cleanup_required_option: "Expected command option `--improper-cache-version`, `--improper-git-commit` or `--improper-repo-cache`!"
      repo_name_incorrect: "Incorrect repo name `%{name}` given!"
      image_name_incorrect: "Incorrect image name `%{name}` given!"
      tag_name_incorrect: "Incorrect tag name `%{name}` given!"
      context_directory_not_found: "Context directory `%{path}` not found!"
      stored_build_dir_already_exist: "Cannot store current build_dir `%{path}`: restore or delete old build_dir!"
      secret_key_not_found: "Secret key not found in %{not_found_in}!"
      minikube_not_found: "Minikube not found: install minikube (https://github.com/kubernetes/minikube/releases)!"
      minikube_not_started: "Minikube not started!"
      helm_not_found: "Helm not found: install helm (https://github.com/kubernetes/helm/blob/master/docs/install.md)"
      helm_template_plugin_not_installed: "Helm plugin `template` isn't installed: run command `helm plugin install https://github.com/technosophos/helm-template`"
      helm_release_not_exist: "Helm release `%{name}` doesn't exist!"
      no_helm_chart_spec_name: "Bad name `%{name}` in helm chart spec %{path}:\n%{raw_spec}"
      file_not_exist: "File `%{path}` doesn't exist!"
      helm_directory_not_exist: "Helm directory doesn't exist in project!"
      chart_yaml_not_found: "Chart.yaml file `%{path}` not found!"
      values_file_not_found: "Values file `%{path}` not found!"
      secret_file_not_found: "Secret file `%{path}` not found!"
      secret_file_empty: "Secret file `%{path}` can't be empty!"
      incorrect_yaml_structure: "Incorrect YAML structure in `%{path}`!"
      editor_not_found: "Editor not found!"
      expected_only_one_tag: 'Expected only one tag (`%{tags}`)!'
      kube_deploy_timeout: "Deploy timeout!"
      kube_connect_timeout: "Connect timeout when connecting to kube API."
      kube_helm_failed: "Helm failed: %{output}"
      samples_directory_not_exist: "Samples directory `%{path}` not exist in repository `%{url}`!"
      sample_not_exist: "Sample `%{name}` not exist in repository `%{url}` (inside samples directory `%{path}`)!"
    dapp:
      no_such_dimg: "No such dimg: `%{dimgs_patterns}`!"
      no_such_app: "No such app: `%{apps_patterns}`!"
      dappfile_not_found: "dappfile.yml, dappfile.yaml or Dappfile not found!"
      cannot_run_ssh_agent: "Can't run ssh-agent!"
      ssh_key_not_found: "Ssh key `%{path}` doesn't exist!"
      docker_not_found: "Docker not found!"
      docker_version: "Required docker version (`%{version}`): VERSION must be newer than `%{min_version}`!"
      dapp_config_file_incorrect: "%{message}"
      yaml_file_incorrect: "Yaml file `%{file}`: `%{message}`"
      yaml_incorrect: "`%{message}`"
      incorrect_dapp_config_option: ".dapp_config includes option `%{option}` with incorrect value `%{value}`: expected one of the following types [%{expected}]"
      incorrect_dapp_config_option_color: ".dapp_config includes option `color` with incorrect value `%{value}`: expected one of the following values [%{expected}]"
      ci_environment_required: 'CI environment required (Travis or GitLab CI)!'
      git_branch_without_name: "Dimg has specific revision that isn't associated with a branch name!"
      download_failed_bad_dappfile_yml_checksum: "Cannot download dappfile-yml binary dependency from %{url}: checksum validation failed"
    config:
      dimg_name_required: 'Dimg name required!'
      dimg_name_incorrect: "Dimg has incorrect name `%{value}`: doesn't match regex `%{pattern}`!"
      mount_from_or_from_path_required: "Mount: `from` or `from_path` directive required!"
      mount_duplicate_to: "Duplicate mount point `%{path}`!"
      export_to_required: "Export: `to` directive required!"
      add_to_required: "Add: `to` directive required!"
      export_cwd_absolute_path_required: "Export: given cwd path must be absolute!"
      export_to_absolute_path_required: "Export: given `to` path must be absolute!"
      export_include_paths_relative_path_required: "Export: given `include_paths` path must be relative!"
      export_exclude_paths_relative_path_required: "Export: given `exclude_paths` path must be relative!"
      stages_dependencies_paths_relative_path_required: "stage_dependencies: given dependencies for stage `%{stage}` must be relative!"
      mount_from_absolute_path_required: "Mount: given `from` path must be absolute!"
      mount_from_type_required: "Mount: `from` directive expect `build_dir` or `tmp_dir` type!"
      builder_type_conflict: 'Conflict between builder types!'
      docker_from_incorrect: "`docker.from` has incorrect value `%{name}`!"
      docker_artifact_unsupported_directive: "`artifact.docker` supports only `from` subdirective!"
      stage_artifact_not_associated: "Artifact not associated with any stage: expected `before` or `after` attribute!"
      stage_artifact_double_associate: "Can't use `%{stage}` stage for artifact; already used in `%{conflict_stage}` stage!"
      stage_artifact_not_supported_associated_stage: "Bad artifact stage `%{stage}`!"
      git_artifact_remote_branch_with_commit: "Remote git repo: use `commit` or `branch` directive!"
      artifact_conflict: "Conflict between artifacts!\n\n%{dappfile_context}"
      artifact_not_found: "Invalid Dappfile: artifact `%{name}` should be defined before import directive!"
      artifact_already_exists: "Invalid Dappfile: artifact `%{name}` already exists!"
      scratch_unsupported_directive: "Scratch dimg has unsupported directive `%{directive}`!"
      scratch_artifact_required: "Scratch dimg without artifacts!"
      scratch_artifact_associated: "Scratch artifact can't be associated: not expected `before`/`after` attribute!"
      scratch_artifact_docker_from: "Scratch artifact must have directive `docker.from`!"
      unsupported_scale_value: "Define unsupported scale value `%{value}`!"
      app_name_required: 'App name required!'
      app_dimg_not_found: 'Not found dimg `%{dimg}` for app `%{app}`!'
      app_dimg_not_defined: 'Not defined dimg for app `%{app}`!'
      app_bootstrap_dimg_not_defined: "Not defined dimg for app.bootstrap!"
      app_bootstrap_dimg_not_found: "Not found dimg `%{dimg}` for app.bootstrap!"
      app_before_apply_job_dimg_not_defined: "Not defined dimg for app.before_apply_job!"
      app_before_apply_job_dimg_not_found: "Not found dimg `%{dimg}` for app.before_apply_job!"
      unsupported_port_number: "Port number `%{number}` isn't supported!"
      unsupported_target_number: "Target number `%{number}` isn't supported!"
      app_name_incorrect: "App has incorrect name `%{value}`: doesn't match regex `%{pattern}`!"
      namespace_name_incorrect: "Namespace has incorrect name `%{value}`: doesn't match regex `%{pattern}`!"
      deployment_bootstrap_dimg_not_defined: "Not defined dimg for deployment.bootstrap!"
      deployment_bootstrap_dimg_not_found: "Not found dimg `%{dimg}` for deployment.bootstrap!"
      deployment_before_apply_job_dimg_not_defined: "Not defined dimg for deployment.before_apply_job!"
      deployment_before_apply_job_dimg_not_found: "Not found dimg `%{dimg}` for deployment.before_apply_job!"
    chef:
      stage_checksum_not_calculated: "Chef stage `%{stage}` checksum isn't calculated yet, run build first!"
      stage_path_overlap: "Can't install `%{cookbook}` cookbook's path %{from} into %{to} already exists!"
      builder_cookbook_not_found: "Dapp cookbook directory not found at %{path}"
      berksfile_absolute_path_forbidden: "Absolute paths in Berksfile are not allowed (cookbook `%{cookbook}`, path: `%{path}`)"
    registry:
      authenticate_type_not_supported: 'Registry `%{registry}`: authenticate type is not supported!'
      page_not_found: "Registry `%{registry}`: page `%{url}` not found!"
      method_not_allowed: "Registry `%{registry}`: method `%{method}` not allowed (`%{url}`)!"
      user_not_authorized: 'Registry `%{registry}`: user not authorized!'
      registry_not_available: 'Registry `%{registry}`: not available!'
    rugged:
      git_repository_reference_error: "Git repo `%{name}`: %{message}!"
      rugged_remote_error: "Remote git repo `%{url}`: `%{message}`!"
      local_git_repository_does_not_exist: "Local git repo (`%{path}`): doesn't exist!"
      commit_not_found_in_local_git_repository: "Local git repo (`%{path}`): commit `%{commit}` not found!\nIf commit has been rebased: run command `dapp dimg stages cleanup local --improper-git-commit`!"
      commit_not_found_in_remote_git_repository: "Remote git repo `%{url}`: commit `%{commit}` not found!\nIf commit has been rebased: run command `dapp dimg stages cleanup local --improper-git-commit`!"
      git_local_submodule_commit_not_found: "Git repo `%{path}`: submodule commit `%{commit}` not found!"
      git_remote_submodule_commit_not_found: "Git repo `%{url}`: submodule commit `%{commit}` not found!"
      branch_not_exist_in_remote_git_repository: "Remote git repo `%{url}`: branch `%{branch}` not exist!"
      rugged_protocol_not_supported: "Rugged has been compiled without support for `%{protocol}`.\nGit repositories will not be reachable via `%{protocol}` (`%{url}`).\nRugged.features should include `%{protocol}`."
      git_local_incorrect_gitmodules_params: "Local git repo with invalid `.gitmodules` file: %{error}"
      incorrect_gitmodules_file: "Git repo `%{name}` with invalid `.gitmodules` file: %{error}\n\n%{content}"
      git_repository_without_remote_url: "Git repo `%{name}`: remote url cannot be detected!\nYou should check `remote origin url` in `%{path}` repository."
      git_repository_not_found: "Git repository `%{path}` not found!\nYou should check `remote origin url` in `%{parent_git_path}` repository."
    lock:
      timeout: "Could not obtain lock for `%{name}` within %{timeout} seconds!"
    app:
      namespace_not_found: "App `%{name}`: namespace `%{namespace}` not found!"
      namespace_not_defined: "App `%{name}`: namespace not defined!"
    kubernetes:
      config_not_found: "Kube config not found in: KUBECONFIG, kubectl (through `kubectl config view`), `~/.kube/config`"
      config_file_not_found: "Kube config file `%{config_path}` not found!"
      user_config_not_found: "User's `%{user}` config is not found in config `%{config_path}`"
      cluster_config_not_found: "Cluster's `%{cluster}` config is not found in config `%{config_path}`"
      context_config_not_found: "Context `%{context_name}` is not found in config `%{config_path}`"
      server_connection_refused: "Kube server `%{url}` connection refused: %{error}"
      server_error: "Kube respond with server error code %{response_http_status}, request parameters: `%{request_parameters}`, response: `%{response_raw_body}`"
      container_stuck: "Pod's `%{pod_name}` container `%{container_name}` stuck in %{state} state: %{state_reason}: %{state_message}"
      bad_image: "Pod `%{pod_name}` bad image: %{reason}: %{message}"
      container_crash: "Pod's `%{pod_name}` container crashed: %{reason}: %{message}"
    secret:
      bad_data: "Data `%{data}` can't be decrypted: check encryption key and data!"
      key_length_too_short: "Encryption key isn't valid (required size %{required_size} bytes)!"
